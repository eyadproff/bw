project.version = '1.0'

dependencies {
    implementation project(':bw-client-preloader')
    implementation 'org.controlsfx:controlsfx:8.40.12'
    implementation 'com.squareup.moshi:moshi:1.5.0'
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-moshi:2.3.0'
    implementation 'org.activiti:activiti-engine:6.0.0'
    implementation 'com.h2database:h2:1.4.196'
    implementation 'org.slf4j:slf4j-nop:1.7.25' // dismiss Activiti logs
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                   'Implementation-Version': project.version,
                   'Implementation-Vendor': 'NIC',
                   'Permissions': 'all-permissions',
                   'Built-By': 'Biometrics Team',
                   'Main-Class': 'sa.gov.nic.bio.bw.client.AppEntryPoint',
                   'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' '),
                   'JavaFX-Preloader-Class': 'sa.gov.nic.bio.bw.client.preloader.AppPreloader')
    }
}

task copyDependentJarsTask(type: Copy) {
    from configurations.runtimeClasspath.files
    into 'build/libs'
}
copyDependentJarsTask.dependsOn(jar)

/*

Creating the keystore:

keytool -genkeypair -keystore bw-keystore.p12
-storetype PKCS12 -storepass bw@#$%321 -alias bw -keyalg RSA -keysize 2048 -validity 999999 -dname "
CN=BW SSL Certificate, OU=Biometrics Team, O=NIC, L=Riyadh, ST=Riyadh, C=SA" -ext san=dns:bw.nic.gov.sa

*/


task deployWebStart {
    doLast {
        ant.signjar(
                jar: 'build/libs/*.jar',
                destDir: 'build/libs',
                keystore:"../build-resources/bw-keystore.p12",
                storetype:"PKCS12",
                storepass:"bw#456321",
                alias:"bw",
                preservelastmodified:"true")

        String jnlpTemplate = new File("${projectDir}/../build-resources/bw-template.jnlp").getText('UTF-8')
        def jars = StringBuilder.newInstance()

        boolean first = true;

        fileTree(dir: 'build/libs', include: '**/*.jar').visit { FileVisitDetails details ->

            String fileName = details.file.name
            if(!fileName.endsWith(".jar")) return

            int lastDashIndex = fileName.lastIndexOf('-')
            String libraryName = fileName.substring(0, lastDashIndex)

            if(first) first = false
            else jars << '\n        '

            jars << '<jar href="' + fileName + '"'

            if(libraryName.endsWith('preloader')) jars << ' download="progress"'
            else jars << ' download="lazy"'

            if(libraryName.endsWith('main')) jars << ' main="true"'

            jars << '/>'
        }

        jnlpTemplate = jnlpTemplate.replace('<!--JARS PLACE HOLDER-->', jars)

        if(!project.hasProperty('env') || project.getProperty('env') != 'dev')
        {
            jnlpTemplate = jnlpTemplate.replace('href="bw.jnlp"', 'codebase="http://bw.nic.gov.sa/bw/" href="bw.jnlp"')
        }

        File directory = new File("${projectDir}/build/web-start")
        directory.mkdirs()
        File file = new File(directory, 'bw.jnlp')
        file.createNewFile()
        file.text = jnlpTemplate

        copy {
            from 'build/libs'
            into "build/web-start"
        }
    }
}
deployWebStart.dependsOn(copyDependentJarsTask)

task runWebStart(type: Exec, group: 'run') {
    workingDir 'build/web-start'
    commandLine 'javaws', 'bw.jnlp'
}
runWebStart.dependsOn(deployWebStart)


task run(type: JavaExec, group: 'run') {
    main = "-jar" // workaround to "java -jar file.jar"
    args = [jar.archivePath.absolutePath]
}
run.dependsOn(copyDependentJarsTask)