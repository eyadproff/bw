buildscript {
    repositories {
        flatDir {
            dirs "libs/gradle-plugins"
        }
    }
    dependencies {
        classpath name: 'jsch-0.1.55'
        classpath name: 'groovy-ssh-2.10.1'
        classpath name: 'gradle-ssh-plugin-2.10.1'
    }
}

allprojects {
    group = 'sa.gov.nic.bio'
    version = '2021.01.1'
}

subprojects {
    apply plugin: 'java'

    sourceCompatibility = 14
    targetCompatibility = 14

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    repositories {
        flatDir {
            dirs "../libs/compile"
            dirs "../libs/test"
        }
    }

    dependencies {
        // JavaFX
        implementation name: "javafx.base-14.0.0"
        implementation name: "javafx.controls-14.0.0"
        implementation name: "javafx.fxml-14.0.0"
        implementation name: "javafx.graphics-14.0.0"
        implementation name: "javafx.swing-14.0.0"
        implementation name: "javafx.web-14.0.0"
        implementation name: "javafx.media-14.0.0"

        // JavaFX extension library
        implementation name: "controlsfx-11.0.1"

        // BCL-Utils and Biokit library
        implementation name: "bio.commons-2019.01.2"
        implementation name: "bcl-utils-2020.07.1"
        implementation name: "biokit-library-2021.01.1"

        // JUnit
        testImplementation name : "junit-platform-commons-1.2.0"
        testImplementation name : "junit-platform-console-1.2.0"
        testImplementation name : "junit-platform-console-standalone-1.2.0"
        testImplementation name : "junit-platform-engine-1.2.0"
        testImplementation name : "junit-platform-gradle-plugin-1.2.0"
        testImplementation name : "junit-platform-launcher-1.2.0"
        testImplementation name : "junit-platform-runner-1.2.0"
        testImplementation name : "junit-platform-suite-api-1.2.0"
        testImplementation name : "junit-platform-surefire-provider-1.2.0"
        testImplementation name : "junit-jupiter-api-5.2.0"
        testImplementation name : "junit-jupiter-engine-5.2.0"
        testImplementation name : "junit-jupiter-params-5.2.0"
        testImplementation name : "junit-jupiter-migrationsupport-5.2.0"
        testImplementation name : "junit-vintage-engine-5.2.0"
        testImplementation name : "apiguardian-api-1.0.0"
        testImplementation name : "opentest4j-1.1.0"
    }

    sourceSets {
        main.output.resourcesDir = main.java.outputDir
    }

    jar {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    afterEvaluate {

        compileJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                        '-Xlint:unchecked',
                        '-Xlint:deprecation',
                        '-Xlint:-requires-transitive-automatic',
                        '--module-path', classpath.asPath,
                        '--patch-module', "$moduleName=" + files(sourceSets.main.resources.srcDirs).asPath,
                ]
                classpath = files()
            }
        }

        compileTestJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                        '-Xlint:unchecked',
                        '-Xlint:deprecation',
                        '-Xlint:-requires-transitive-automatic',
                        '--module-path', classpath.asPath,
                        '--add-modules', 'junit',
                        '--add-reads', "$moduleName=junit",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
                ]
                classpath = files()
            }
        }

        test {
            inputs.property("moduleName", moduleName)
            doFirst {
                jvmArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', 'ALL-MODULE-PATH',
                        '--add-reads', "$moduleName=junit",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
                ]
                classpath = files()
            }
        }
    }
}

apply plugin: 'base'
apply plugin: "org.hidetake.ssh"

task collectDependencies(type: Copy, group: 'web-start') {
    from(subprojects.collect { it.tasks.withType(Jar) }) {
        exclude 'scenicview-*.jar'
    }
    from(subprojects.collect { it.sourceSets.main.runtimeClasspath }) {
        exclude 'sa/**'
        exclude 'org/**'
        exclude 'module-info.class'
        exclude 'scenicview-*.jar'
    }
    into 'build/libs'
}

task packageWebStart(group: 'web-start') {
    doLast {
        String jnlpTemplate = new File("build-resources/bw-template.jnlp").getText('UTF-8')

        File directory = new File(project.rootDir, 'build/web-start')
        directory.mkdirs()
        File file = new File(directory, 'APPLICATION.JNLP')
        file.createNewFile()
        file.text = jnlpTemplate

        // copy jar files
        copy {
            from 'build/libs'
            into "build/web-start/modulepath-jars"
        }

        // copy javafx DLLs
        copy {
            from 'build-resources/javafx-dlls/32-bit'
            into "build/web-start/resources"
        }
    }
}
packageWebStart.dependsOn(collectDependencies)

remotes {
    webServer {
        host = '10.0.73.50'
        user = 'root'
        identity = file('build-resources/id_rsa')
        knownHosts = file('build-resources/known_hosts')
    }
}

task packageWebStartAndDeployDev(group: 'web-start') {
    doLast {
        ssh.run {
            session(remotes.webServer) {
                remove '/opt/dev/wlp/usr/servers/bio-client-downloader/clients/bw'
                execute 'mkdir /opt/dev/wlp/usr/servers/bio-client-downloader/clients/bw'
                put from: new File(project.rootDir, 'build/web-start').listFiles().toList(), into: '/opt/dev/wlp/usr/servers/bio-client-downloader/clients/bw'
            }
        }
    }
}
packageWebStartAndDeployDev.dependsOn(packageWebStart)

task packageWebStartAndDeployInt(group: 'web-start') {
    doLast {
        ssh.run {
            session(remotes.webServer) {
                remove '/opt/int/wlp/usr/servers/bio-client-downloader/clients/bw'
                execute 'mkdir /opt/int/wlp/usr/servers/bio-client-downloader/clients/bw'
                put from: new File(project.rootDir, 'build/web-start').listFiles().toList(), into: '/opt/int/wlp/usr/servers/bio-client-downloader/clients/bw'
            }
        }
    }
}
packageWebStartAndDeployInt.dependsOn(packageWebStart)

task deploy_dev(group: 'web-start') {
    doLast {
        ssh.run {
            session(remotes.webServer) {
                remove '/opt/dev/wlp/usr/servers/bio-client-downloader/clients/bw'
                execute 'mkdir /opt/dev/wlp/usr/servers/bio-client-downloader/clients/bw'
                put from: new File(project.rootDir, 'build/web-start').listFiles().toList(), into: '/opt/dev/wlp/usr/servers/bio-client-downloader/clients/bw'
            }
        }
    }
}

task deploy_int(group: 'web-start') {
    doLast {
        ssh.run {
            session(remotes.webServer) {
                remove '/opt/int/wlp/usr/servers/bio-client-downloader/clients/bw'
                execute 'mkdir /opt/int/wlp/usr/servers/bio-client-downloader/clients/bw'
                put from: new File(project.rootDir, 'build/web-start').listFiles().toList(), into: '/opt/int/wlp/usr/servers/bio-client-downloader/clients/bw'
            }
        }
    }
}

// 64-bit

task packageWebStart64(group: 'web-start') {
    doLast {
        String jnlpTemplate = new File("build-resources/bw64-template.jnlp").getText('UTF-8')

        File directory = new File(project.rootDir, 'build/web-start64')
        directory.mkdirs()
        File file = new File(directory, 'APPLICATION.JNLP')
        file.createNewFile()
        file.text = jnlpTemplate

        // copy jar files
        copy {
            from 'build/libs'
            into "build/web-start64/modulepath-jars"
        }

        // copy javafx DLLs
        copy {
            from 'build-resources/javafx-dlls/64-bit'
            into "build/web-start64/resources"
        }
    }
}
packageWebStart64.dependsOn(collectDependencies)


task packageWebStart64AndDeployDev(group: 'web-start') {
    doLast {
        ssh.run {
            session(remotes.webServer) {
                remove '/opt/dev/wlp/usr/servers/bio-client-downloader/clients/bw64'
                execute 'mkdir /opt/dev/wlp/usr/servers/bio-client-downloader/clients/bw64'
                put from: new File(project.rootDir, 'build/web-start64').listFiles().toList(), into: '/opt/dev/wlp/usr/servers/bio-client-downloader/clients/bw64'
            }
        }
    }
}
packageWebStart64AndDeployDev.dependsOn(packageWebStart64)

task packageWebStart64AndDeployInt(group: 'web-start') {
    doLast {
        ssh.run {
            session(remotes.webServer) {
                remove '/opt/int/wlp/usr/servers/bio-client-downloader/clients/bw64'
                execute 'mkdir /opt/int/wlp/usr/servers/bio-client-downloader/clients/bw64'
                put from: new File(project.rootDir, 'build/web-start64').listFiles().toList(), into: '/opt/int/wlp/usr/servers/bio-client-downloader/clients/bw64'
            }
        }
    }
}
packageWebStart64AndDeployInt.dependsOn(packageWebStart64)

task deploy_dev64(group: 'web-start') {
    doLast {
        ssh.run {
            session(remotes.webServer) {
                remove '/opt/dev/wlp/usr/servers/bio-client-downloader/clients/bw64'
                execute 'mkdir /opt/dev/wlp/usr/servers/bio-client-downloader/clients/bw64'
                put from: new File(project.rootDir, 'build/web-start64').listFiles().toList(), into: '/opt/dev/wlp/usr/servers/bio-client-downloader/clients/bw64'
            }
        }
    }
}

task deploy_int64(group: 'web-start') {
    doLast {
        ssh.run {
            session(remotes.webServer) {
                remove '/opt/int/wlp/usr/servers/bio-client-downloader/clients/bw64'
                execute 'mkdir /opt/int/wlp/usr/servers/bio-client-downloader/clients/bw64'
                put from: new File(project.rootDir, 'build/web-start64').listFiles().toList(), into: '/opt/int/wlp/usr/servers/bio-client-downloader/clients/bw64'
            }
        }
    }
}