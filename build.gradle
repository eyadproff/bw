import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        flatDir {
            dirs "libs/build"
        }
    }
    dependencies {
        classpath name: 'jsch-0.1.54'
        classpath name: 'groovy-ssh-2.9.0'
        classpath name: 'gradle-ssh-plugin-2.9.0'
    }
}

project.version = '2018.06.2'
group = 'sa.gov.nic.bio'

apply plugin: 'java'
apply plugin: 'application'
apply plugin: "org.hidetake.ssh"

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

mainClassName = 'sa.gov.nic.bio.bw.client.AppEntryPoint'
applicationDefaultJvmArgs = ['-Djava.ext.dirs=C:\\Program Files\\Java\\jdk1.8.0_152\\jre\\lib\\ext;build\\extensions',
                             '-Djava.locale.providers=SPI,CLDR,JRE,HOST',
                             '-Djavafx.preloader=sa.gov.nic.bio.bw.client.preloader.AppPreloader']

repositories {
    flatDir {
        dirs "libs/compile"
        dirs "libs/provided"
    }
}

dependencies {
    implementation name: "controlsfx-8.40.14"
    implementation name: "okhttp-3.8.1"
    implementation name: "okio-1.13.0"
    implementation name: "retrofit-2.3.0"
    implementation name: "gson-2.8.2"
    implementation name: "converter-gson-2.3.0"
    implementation name: "javax.websocket-api-1.1"
    implementation name: "tomcat-api-9.0.2"
    implementation name: "tomcat-juli-9.0.2"
    implementation name: "tomcat-util-9.0.2"
    implementation name: "tomcat-websocket-9.0.2"
    implementation name: "bcl-utils-2018.04.1"
    implementation name: "biokit-library-2018.05.2"
    implementation name: "jasperreports-6.5.1"
    implementation name: "jasperreports-fonts-6.5.1"
    implementation name: "jasper-compiler-jdt-5.5.23"
    implementation name: "commons-logging-1.2"
    implementation name: "commons-digester-2.1"
    implementation name: "commons-collections-3.2.2"
    implementation name: "commons-beanutils-1.9.3"
    implementation name: "custom-report-font-1.0.0"
    implementation name: "itext-4.2.1"
    implementation name: "barbecue-1.5-beta1"
    testImplementation name: "junit-4.12"
}

processResources {
    filesMatching('**/config.properties') {
        def env = System.getenv('build-environemnt')
        println 'build-environment = ' + env

        filter(ReplaceTokens, tokens:['APP_VERSION': project.version])

        /*if(env == 'INT') filter(ReplaceTokens, tokens:['APP_VERSION': project.version + '-SNAPSHOT' + new Date().format('yyyyMMddHHmmss')])
        else if(env == 'PROD') filter(ReplaceTokens, tokens:['APP_VERSION': project.version])
        else *//*(DEV)*//* filter(ReplaceTokens, tokens:['APP_VERSION': project.version + '-DEV'])*/
    }
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'NIC',
                'Application-Name': 'Biometrics Workstation',
                'Built-By': 'Biometrics Team',
                'JavaFX-Preloader-Class': 'sa.gov.nic.bio.bw.client.preloader.AppPreloader',
                'JavaFX-Application-Class': 'sa.gov.nic.bio.bw.client.AppEntryPoint',
                'Main-Class': 'sa.gov.nic.bio.bw.client.AppEntryPoint',
                'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' '))
    }
}

task collectDependencies(type: Copy) {
    from configurations.runtimeClasspath.files
    into 'build/libs'
}
collectDependencies.dependsOn(jar)

task packageWebStart(group: 'web-start') {
    doLast {

        String jnlpTemplate = new File("build-resources/bw-template.jnlp").getText('UTF-8')

        // add JNLP properties to the JNLP file
        def sProperties = StringBuilder.getDeclaredConstructor().newInstance()
        boolean first = true
        Properties properties = new Properties()
        InputStream inputStream = new FileInputStream("src/main/resources/sa/gov/nic/bio/bw/client/core/config/jnlp.properties")
        properties.load(inputStream)
        inputStream.close()
        for(Object key : Collections.list(properties.propertyNames()))
        {
            String sKey = (String) key
            String value = properties.getProperty(sKey)

            if(first) first = false
            else sProperties << '\n        '

            sProperties << '<property name="' + sKey + '" value="' + value + '"/>'
        }

        jnlpTemplate = jnlpTemplate.replace('<!--PROPERTIES PLACE HOLDER-->', sProperties)

        File directory = new File("${projectDir}/build/web-start")
        directory.mkdirs()
        File file = new File(directory, 'APPLICATION.JNLP')
        file.createNewFile()
        file.text = jnlpTemplate

        // copy jar files
        copy {
            from 'build/libs'
            into "build/web-start/classpath-jars"
        }

        // compress the jars
        fileTree(dir: 'build/web-start/classpath-jars', include: '**/*.jar', excludes: ['bw-client-*.jar', 'controlsfx-8.40.14.jar', 'tomcat-*.jar']).visit { FileVisitDetails details ->
            String fileName = details.file.name
            exec {
                workingDir 'build/web-start/classpath-jars'
                commandLine 'pack200', fileName + ".pack.gz", fileName
            }
        }

        // delete the un-compressed jars
        fileTree(dir: 'build/web-start/classpath-jars', include: '**/*.jar', excludes: ['bw-client-*.jar', 'controlsfx-8.40.14.jar', 'tomcat-*.jar']).visit { FileVisitDetails details ->
            details.file.delete()
        }

        // copy the extensions folder
        copy {
            from 'build/extensions'
            into "build/web-start/resources/extensions"
        }
    }
}
packageWebStart.dependsOn(collectDependencies)
run.dependsOn(collectDependencies)


remotes {
    webServer {
        host = '10.0.73.50'
        user = 'root'
        identity = file('build-resources/integration_server_id_rsa')
    }
}

task packageWebStartAndDeploy(group: 'web-start') {
    doLast {
        ssh.run {
            session(remotes.webServer) {
                remove '/opt/dev/wlp/usr/servers/bio-client-downloader/clients/bw'
                execute 'mkdir /opt/dev/wlp/usr/servers/bio-client-downloader/clients/bw'
                put from: new File('build/web-start').listFiles().toList(), into: '/opt/dev/wlp/usr/servers/bio-client-downloader/clients/bw'
            }
        }
    }
}
packageWebStartAndDeploy.dependsOn(packageWebStart)

task deploy(group: 'web-start') {
    doLast {
        ssh.run {
            session(remotes.webServer) {
                remove '/opt/dev/wlp/usr/servers/bio-client-downloader/clients/bw'
                execute 'mkdir /opt/dev/wlp/usr/servers/bio-client-downloader/clients/bw'
                put from: new File('build/web-start').listFiles().toList(), into: '/opt/dev/wlp/usr/servers/bio-client-downloader/clients/bw'
            }
        }
    }
}

task packageExtensions(type: Jar) {
    delete fileTree('build/extensions').include('**/*')
    from("build/classes/java/main") {
        include '/sa/gov/nic/bio/bw/client/core/utils/ArabicCalendarDataProvider.class'
    }

    from("build/resources/main") {
        include 'META-INF/**'
    }


    destinationDir file('build/extensions')
    baseName 'arabic-calendar-data-provider'
    version '1.0'
    extension 'jar'
}
packageExtensions.dependsOn(build)
run.dependsOn(packageExtensions)
packageWebStart.dependsOn(packageExtensions)